/**
 *This class start the flow of the program 
 */
package electronics.logic.simulation;

import helper.ProcGenException;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import electronics.logic.helper.Entity;
import electronics.logic.helper.Project;
import electronics.logic.helper.Signal;
import electronics.logic.helper.SignalBus;

/**
 * @author DINESH THANGAVEL
 *
 */
public class ProjectSimulator extends Simulator{
	
	Project hostProject = null;
	SignalBus projectClock = new SignalBus("PrjClk",1); //main clock generated by the crystal. It is modified by project simulator
	// key is name of the inputSimulator
	HashMap<String,List<SignalBus>> inputSimulationDirectory = new HashMap<String,List<SignalBus>>();
	HashMap<String,SignalBus> signalsConnectedToProjectClk = new HashMap<String,SignalBus>();
	
	public ProjectSimulator(Project hostProject){
		this.hostProject = hostProject;
	}
	
	public void runSimulation(float timeToSimulate, float clockPeriod) throws ProcGenException{
		float currentTime = 0; // starting the simulation at time = 0
		projectClock.setValue(Signal.HIGH);
		while(currentTime < timeToSimulate){
			
			togglePrjClk();
			Iterator<String> entityIdIterator =  this.signalsConnectedToProjectClk.keySet().iterator();
			while(entityIdIterator.hasNext()){
				String entityId =  entityIdIterator.next();
				Entity entity = this.hostProject.getEntityManager().getEntityById(entityId);
				SignalBus modifiedSignalName = this.signalsConnectedToProjectClk.get(entityId);
				
				assert(entity.getAllPortsName().contains(modifiedSignalName));
				
				entity.getInputByName(modifiedSignalName.getName()).setValue(this.projectClock.getValue());
				entity.getEntitySimulator().runSimulation();
				
			}
			currentTime = currentTime + clockPeriod/2 ;
		} 		
	}

	public void togglePrjClk() {
		assert(projectClock.getValue().length == 1);
		if(projectClock.getValue()[0].equals(Signal.HIGH)){
			projectClock.setValue(Signal.LOW);
			System.out.println("0");
		}
		
		else{
			projectClock.setValue(Signal.HIGH);
			System.out.println("1");
		}
		
	}

	/*
	 * @input
	 */
	public void addInputSimulator(InputSimulator newInputSimulator, String entityId, String signalName) {
		
		// check if entity exists
		if(hostProject.getEntityManager().getEntityById(entityId) != null){
			//TODO: validate entity contains signal name
			
			
//			this.inputSimulationDirectory.put(newInputSimulator.getName(), )
		}
	}
}
